"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const hie_1 = require("./hie");
const atom_1 = require("atom");
const upi_consumer_1 = require("./upi-consumer");
let process;
let disposables;
let tempDisposables;
var config_1 = require("./config");
exports.config = config_1.config;
function activate(_state) {
    process = new hie_1.HieLanguageClient();
    disposables = new atom_1.CompositeDisposable();
    tempDisposables = new atom_1.CompositeDisposable();
    disposables.add(tempDisposables);
    tempDisposables.add(process.onError((args) => {
        console.error(...args);
        atom.notifications.addError('HIE warning', {
            detail: args.map((x) => x.toString()).join('; '),
        });
    }), process.onWarning((args) => {
        console.warn(...args);
        atom.notifications.addWarning('HIE warning', {
            detail: args.map((x) => x.toString()).join('; '),
        });
    }));
    disposables.add(atom.commands.add('atom-workspace', {
        'ide-haskell-hie:restart-backend': () => process && process.restart(),
    }));
}
exports.activate = activate;
function deactivate() {
    process && process.deactivate();
    process = undefined;
    disposables && disposables.dispose();
    disposables = undefined;
    tempDisposables = undefined;
}
exports.deactivate = deactivate;
function consumeUPI(service) {
    if (!process || !disposables) {
        return undefined;
    }
    tempDisposables && tempDisposables.dispose();
    tempDisposables = undefined;
    const upiConsumer = new upi_consumer_1.UPIConsumer(service, process);
    disposables.add(upiConsumer);
    return upiConsumer;
}
exports.consumeUPI = consumeUPI;
function autocompleteProvider_2_0_0() {
    if (!process)
        return undefined;
    return process.provideAutocomplete();
}
exports.autocompleteProvider_2_0_0 = autocompleteProvider_2_0_0;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlLWhhc2tlbGwtaGllLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2lkZS1oYXNrZWxsLWhpZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUF5QztBQUN6QywrQkFBMEM7QUFDMUMsaURBQTRDO0FBRzVDLElBQUksT0FBc0MsQ0FBQTtBQUMxQyxJQUFJLFdBQTRDLENBQUE7QUFDaEQsSUFBSSxlQUFnRCxDQUFBO0FBRXBELG1DQUFpQztBQUF4QiwwQkFBQSxNQUFNLENBQUE7QUFFZixrQkFBeUIsTUFBYTtJQUNwQyxPQUFPLEdBQUcsSUFBSSx1QkFBaUIsRUFBRSxDQUFBO0lBQ2pDLFdBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7SUFDdkMsZUFBZSxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtJQUMzQyxXQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBRWhDLGVBQWUsQ0FBQyxHQUFHLENBQ2pCLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFXLEVBQUUsRUFBRTtRQUM5QixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFO1lBQ3pDLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ2pELENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxFQUNGLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFXLEVBQUUsRUFBRTtRQUNoQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDckIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFO1lBQzNDLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ2pELENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUNILENBQUE7SUFFRCxXQUFXLENBQUMsR0FBRyxDQUNiLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFO1FBQ2xDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO0tBQ3RFLENBQUMsQ0FDSCxDQUFBO0FBQ0gsQ0FBQztBQTFCRCw0QkEwQkM7QUFFRDtJQUNFLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDL0IsT0FBTyxHQUFHLFNBQVMsQ0FBQTtJQUNuQixXQUFXLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ3BDLFdBQVcsR0FBRyxTQUFTLENBQUE7SUFDdkIsZUFBZSxHQUFHLFNBQVMsQ0FBQTtBQUM3QixDQUFDO0FBTkQsZ0NBTUM7QUFFRCxvQkFBMkIsT0FBNkI7SUFDdEQsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUM1QixPQUFPLFNBQVMsQ0FBQTtLQUNqQjtJQUNELGVBQWUsSUFBSSxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDNUMsZUFBZSxHQUFHLFNBQVMsQ0FBQTtJQUMzQixNQUFNLFdBQVcsR0FBRyxJQUFJLDBCQUFXLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ3JELFdBQVcsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDNUIsT0FBTyxXQUFXLENBQUE7QUFDcEIsQ0FBQztBQVRELGdDQVNDO0FBRUQ7SUFDRSxJQUFJLENBQUMsT0FBTztRQUFFLE9BQU8sU0FBUyxDQUFBO0lBQzlCLE9BQU8sT0FBTyxDQUFDLG1CQUFtQixFQUFFLENBQUE7QUFDdEMsQ0FBQztBQUhELGdFQUdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGllTGFuZ3VhZ2VDbGllbnQgfSBmcm9tICcuL2hpZSdcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHsgVVBJQ29uc3VtZXIgfSBmcm9tICcuL3VwaS1jb25zdW1lcidcbmltcG9ydCAqIGFzIFVQSSBmcm9tICdhdG9tLWhhc2tlbGwtdXBpJ1xuXG5sZXQgcHJvY2VzczogSGllTGFuZ3VhZ2VDbGllbnQgfCB1bmRlZmluZWRcbmxldCBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZSB8IHVuZGVmaW5lZFxubGV0IHRlbXBEaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZSB8IHVuZGVmaW5lZFxuXG5leHBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZydcblxuZXhwb3J0IGZ1bmN0aW9uIGFjdGl2YXRlKF9zdGF0ZTogbmV2ZXIpIHtcbiAgcHJvY2VzcyA9IG5ldyBIaWVMYW5ndWFnZUNsaWVudCgpXG4gIGRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICB0ZW1wRGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gIGRpc3Bvc2FibGVzLmFkZCh0ZW1wRGlzcG9zYWJsZXMpXG5cbiAgdGVtcERpc3Bvc2FibGVzLmFkZChcbiAgICBwcm9jZXNzLm9uRXJyb3IoKGFyZ3M6IGFueVtdKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKC4uLmFyZ3MpXG4gICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IoJ0hJRSB3YXJuaW5nJywge1xuICAgICAgICBkZXRhaWw6IGFyZ3MubWFwKCh4KSA9PiB4LnRvU3RyaW5nKCkpLmpvaW4oJzsgJyksXG4gICAgICB9KVxuICAgIH0pLFxuICAgIHByb2Nlc3Mub25XYXJuaW5nKChhcmdzOiBhbnlbXSkgPT4ge1xuICAgICAgY29uc29sZS53YXJuKC4uLmFyZ3MpXG4gICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkV2FybmluZygnSElFIHdhcm5pbmcnLCB7XG4gICAgICAgIGRldGFpbDogYXJncy5tYXAoKHgpID0+IHgudG9TdHJpbmcoKSkuam9pbignOyAnKSxcbiAgICAgIH0pXG4gICAgfSksXG4gIClcblxuICBkaXNwb3NhYmxlcy5hZGQoXG4gICAgYXRvbS5jb21tYW5kcy5hZGQoJ2F0b20td29ya3NwYWNlJywge1xuICAgICAgJ2lkZS1oYXNrZWxsLWhpZTpyZXN0YXJ0LWJhY2tlbmQnOiAoKSA9PiBwcm9jZXNzICYmIHByb2Nlc3MucmVzdGFydCgpLFxuICAgIH0pLFxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlKCkge1xuICBwcm9jZXNzICYmIHByb2Nlc3MuZGVhY3RpdmF0ZSgpXG4gIHByb2Nlc3MgPSB1bmRlZmluZWRcbiAgZGlzcG9zYWJsZXMgJiYgZGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gIGRpc3Bvc2FibGVzID0gdW5kZWZpbmVkXG4gIHRlbXBEaXNwb3NhYmxlcyA9IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uc3VtZVVQSShzZXJ2aWNlOiBVUEkuSVVQSVJlZ2lzdHJhdGlvbikge1xuICBpZiAoIXByb2Nlc3MgfHwgIWRpc3Bvc2FibGVzKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHRlbXBEaXNwb3NhYmxlcyAmJiB0ZW1wRGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gIHRlbXBEaXNwb3NhYmxlcyA9IHVuZGVmaW5lZFxuICBjb25zdCB1cGlDb25zdW1lciA9IG5ldyBVUElDb25zdW1lcihzZXJ2aWNlLCBwcm9jZXNzKVxuICBkaXNwb3NhYmxlcy5hZGQodXBpQ29uc3VtZXIpXG4gIHJldHVybiB1cGlDb25zdW1lclxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXV0b2NvbXBsZXRlUHJvdmlkZXJfMl8wXzAoKSB7XG4gIGlmICghcHJvY2VzcykgcmV0dXJuIHVuZGVmaW5lZFxuICByZXR1cm4gcHJvY2Vzcy5wcm92aWRlQXV0b2NvbXBsZXRlKClcbn1cbiJdfQ==