"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_languageclient_1 = require("atom-languageclient");
const atom_1 = require("atom");
const cp = require("child_process");
const autocomplete_adapter_1 = require("atom-languageclient/build/lib/adapters/autocomplete-adapter");
const apply_edit_adapter_1 = require("atom-languageclient/build/lib/adapters/apply-edit-adapter");
const notifications_adapter_1 = require("atom-languageclient/build/lib/adapters/notifications-adapter");
const document_sync_adapter_1 = require("atom-languageclient/build/lib/adapters/document-sync-adapter");
class HieLanguageClient extends atom_languageclient_1.BaseLanguageClient {
    constructor() {
        super();
        this.emitter = new atom_1.Emitter();
        this.stderrBuf = '';
        this.messages = new Map();
        this.activate();
    }
    onError(cb) {
        return this.emitter.on('error', cb);
    }
    onWarning(cb) {
        return this.emitter.on('warn', cb);
    }
    async getType(buffer, range) {
        const filePath = buffer.getPath();
        if (filePath === undefined)
            throw new Error('No editor URI');
        const res = await this.executeCommand(buffer, 'ghcmod:type', {
            file: atom_languageclient_1.Convert.pathToUri(filePath),
            include_constraints: true,
            pos: atom_languageclient_1.Convert.atomRangeToLSRange(range).start,
        });
        for (const [r, t] of res) {
            const rr = atom_languageclient_1.Convert.lsRangeToAtomRange(r);
            if (rr.containsRange(range))
                return { type: t, range: rr };
        }
        throw new Error('No type found');
    }
    async getInfo(buffer, symbol) {
        const filePath = buffer.getPath();
        if (filePath === undefined)
            throw new Error('No editor URI');
        const res = await this.executeCommand(buffer, 'ghcmod:info', {
            file: atom_languageclient_1.Convert.pathToUri(filePath),
            expr: symbol,
        });
        return res;
    }
    async restart() {
        return this.restartAllServers();
    }
    async deactivate() {
        const res = super.deactivate();
        this.emitter.emit('destroyed');
        this.emitter.dispose();
        return res;
    }
    onDidDestroy(cb) {
        return this.emitter.on('destroyed', cb);
    }
    onMessages(cb) {
        return this.emitter.on('messages', cb);
    }
    getMessages() {
        return flattenOne(this.messages.values());
    }
    setReportBusy(f) {
        this.reportBusy = f;
    }
    provideAutocomplete() {
        return {
            selector: this.getGrammarScopes()
                .map((g) => (g.includes('.') ? '.' + g : g))
                .join(', '),
            inclusionPriority: 1,
            suggestionPriority: 2,
            excludeLowerPriority: false,
            getSuggestions: this.getSuggestions.bind(this),
            getSuggestionDetailsOnSelect: this.getSuggestionDetailsOnSelect.bind(this),
        };
    }
    async getSuggestions(request) {
        const server = await this._serverManager.getServer(request.editor);
        if (server === null || !autocomplete_adapter_1.default.canAdapt(server.capabilities)) {
            return [];
        }
        this.autoComplete = this.autoComplete || new autocomplete_adapter_1.default();
        this._lastAutocompleteRequest = request;
        return this.autoComplete.getSuggestions(server, request, undefined, atom.config.get('autocomplete-plus.minimumWordLength'));
    }
    async getSuggestionDetailsOnSelect(suggestion) {
        const request = this._lastAutocompleteRequest;
        if (!request) {
            return null;
        }
        const server = await this._serverManager.getServer(request.editor);
        if (!server ||
            !autocomplete_adapter_1.default.canResolve(server.capabilities) ||
            !this.autoComplete) {
            return null;
        }
        return this.autoComplete.completeSuggestion(server, suggestion, request);
    }
    preInitialization(conn) {
        super.preInitialization(conn);
        conn.onPublishDiagnostics((params) => {
            const filePath = atom_languageclient_1.Convert.uriToPath(params.uri);
            this.messages.set(params.uri, diagnosticsToResultItems(filePath, params.diagnostics));
            this.emitter.emit('messages', flattenOne(this.messages.values()));
        });
    }
    getLogger() {
        return {
            warn: (...args) => {
                console.warn(...args);
                this.emitter.emit('warn', args);
            },
            error: (...args) => {
                console.error(...args);
                this.emitter.emit('error', args);
            },
            info: (...args) => {
                console.info(...args);
                this.emitter.emit('info', args);
            },
            log: (...args) => {
                console.log(...args);
                this.emitter.emit('log', args);
            },
            debug: (...args) => {
                console.debug(...args);
                this.emitter.emit('debug', args);
            },
        };
    }
    getGrammarScopes() {
        return ['source.haskell'];
    }
    getLanguageName() {
        return 'Haskell';
    }
    getServerName() {
        return 'haskell-ide-engine';
    }
    startServerProcess(projectPath) {
        return cp.spawn('stack', [
            'exec',
            '--',
            atom.config.get('ide-haskell-hie.hiePath'),
            '--lsp',
            '--debug',
        ], { cwd: projectPath });
    }
    handleServerStderr(stderr, projectPath) {
        const [first, ...lines] = stderr.split('\n');
        this.stderrBuf += first;
        if (lines.length > 0) {
            this.logger.warn(`stderr[${projectPath}]: ${this.stderrBuf}`);
            lines.slice(0, -1).forEach((x) => {
                this.logger.warn(`stderr[${projectPath}]: ${x}`);
            });
            this.stderrBuf = lines[lines.length - 1];
        }
    }
    startExclusiveAdapters(server) {
        apply_edit_adapter_1.default.attach(server.connection);
        notifications_adapter_1.default.attach(server.connection, this.name, server.projectPath);
        if (document_sync_adapter_1.default.canAdapt(server.capabilities)) {
            server.disposable.add(new document_sync_adapter_1.default(server.connection, (editor) => this.shouldSyncForEditor(editor, server.projectPath), server.capabilities.textDocumentSync, this.reportBusyWhile.bind(this)));
        }
    }
    async reportBusyWhile(message, promiseGenerator) {
        if (this.reportBusy) {
            return this.reportBusy(message, promiseGenerator);
        }
        else {
            this.logger.info(message);
            return promiseGenerator();
        }
    }
    async executeCommand(buffer, command, ...args) {
        const conn = await this.getConnectionForBuffer(buffer);
        return conn.executeCommand({
            command,
            arguments: args,
        });
    }
    async getConnectionForBuffer(buffer) {
        const conn = await this.getConnectionForEditor(editorForBuffer(buffer));
        if (!conn)
            throw new Error('No HIE connection');
        return conn;
    }
}
exports.HieLanguageClient = HieLanguageClient;
function editorForBuffer(buffer) {
    const editor = atom.workspace
        .getTextEditors()
        .find((ed) => ed.getBuffer() === buffer);
    if (!editor) {
        throw new Error(`No editor for a buffer ${buffer.getId()} with path ${buffer.getPath()}`);
    }
    return editor;
}
function severityLSToUPI(severity) {
    switch (severity) {
        case 1:
            return 'error';
        case 2:
            return 'warning';
        case 3:
            return 'lint';
        case 4:
            return 'lint';
        default:
            return 'HIE';
    }
}
function diagnosticsToResultItems(filePath, ds) {
    return ds.map((x) => ({
        message: x.message,
        uri: filePath,
        context: x.source,
        severity: severityLSToUPI(x.severity),
        position: atom_languageclient_1.Convert.lsRangeToAtomRange(x.range).start,
    }));
}
function flattenOne(arr) {
    return [].concat(...arr);
}
//# sourceMappingURL=data:application/json;base64,