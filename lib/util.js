"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = require("os");
const atom_haskell_utils_1 = require("atom-haskell-utils");
exports.getRootDirFallback = atom_haskell_utils_1.getRootDirFallback;
exports.getRootDir = atom_haskell_utils_1.getRootDir;
exports.isDirectory = atom_haskell_utils_1.isDirectory;
let debuglog = [];
const logKeep = 30000;
function savelog(...messages) {
    const ts = Date.now();
    debuglog.push({
        timestamp: ts,
        messages,
    });
    let ks = 0;
    for (const v of debuglog) {
        if (ts - v.timestamp >= logKeep) {
            break;
        }
        ks++;
    }
    debuglog.splice(0, ks);
}
function debug(...messages) {
    if (atom.config.get('haskell-ghc-mod.debug')) {
        console.log('haskell-ghc-mod debug:', ...messages);
    }
    savelog(...messages.map((v) => JSON.stringify(v)));
}
exports.debug = debug;
function warn(...messages) {
    console.warn('haskell-ghc-mod warning:', ...messages);
    savelog(...messages.map((v) => JSON.stringify(v)));
}
exports.warn = warn;
function error(...messages) {
    console.error('haskell-ghc-mod error:', ...messages);
    savelog(...messages.map((v) => JSON.stringify(v)));
}
exports.error = error;
function getDebugLog() {
    const ts = Date.now();
    debuglog = debuglog.filter(({ timestamp }) => ts - timestamp < logKeep);
    return debuglog
        .map(({ timestamp, messages }) => `${(timestamp - ts) / 1000}s: ${messages.join(',')}`)
        .join(os_1.EOL);
}
exports.getDebugLog = getDebugLog;
function getSymbolAtPoint(editor, point) {
    const [scope] = editor
        .scopeDescriptorForBufferPosition(point)
        .getScopesArray()
        .slice(-1);
    if (scope) {
        const range = editor.bufferRangeForScopeAtPosition(scope, point);
        if (range && !range.isEmpty()) {
            const symbol = editor.getTextInBufferRange(range);
            return { scope, range, symbol };
        }
    }
    return undefined;
}
exports.getSymbolAtPoint = getSymbolAtPoint;
function getSymbolInRange(editor, crange) {
    const buffer = editor.getBuffer();
    if (crange.isEmpty()) {
        return getSymbolAtPoint(editor, crange.start);
    }
    else {
        return {
            symbol: buffer.getTextInRange(crange),
            range: crange,
        };
    }
}
exports.getSymbolInRange = getSymbolInRange;
function handleException(_target, _key, desc) {
    return Object.assign({}, desc, { async value(...args) {
            try {
                return await desc.value.call(this, ...args);
            }
            catch (e) {
                debug(e);
                const upi = await this.upi;
                upi.setStatus({
                    status: 'warning',
                    detail: e.toString(),
                });
                return new Promise(() => {
                });
            }
        } });
}
exports.handleException = handleException;
//# sourceMappingURL=data:application/json;base64,